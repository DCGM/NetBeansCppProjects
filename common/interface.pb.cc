// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: interface.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "interface.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protointerface {

namespace {

const ::google::protobuf::Descriptor* FEConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FEConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* TranslateConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TranslateConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* CaffeConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CaffeConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* Configuration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Configuration_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobFloat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobFloat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultList_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorkRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorkRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_interface_2eproto() {
  protobuf_AddDesc_interface_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "interface.proto");
  GOOGLE_CHECK(file != NULL);
  FEConfiguration_descriptor_ = file->message_type(0);
  static const int FEConfiguration_offsets_[1] = {
  };
  FEConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FEConfiguration_descriptor_,
      FEConfiguration::default_instance_,
      FEConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FEConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FEConfiguration));
  TranslateConfiguration_descriptor_ = file->message_type(1);
  static const int TranslateConfiguration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslateConfiguration, neighborcount_),
  };
  TranslateConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TranslateConfiguration_descriptor_,
      TranslateConfiguration::default_instance_,
      TranslateConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslateConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TranslateConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TranslateConfiguration));
  MatchConfiguration_descriptor_ = file->message_type(2);
  static const int MatchConfiguration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchConfiguration, listsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchConfiguration, database_),
  };
  MatchConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchConfiguration_descriptor_,
      MatchConfiguration::default_instance_,
      MatchConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchConfiguration));
  CaffeConfiguration_descriptor_ = file->message_type(3);
  static const int CaffeConfiguration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeConfiguration, resultsize_),
  };
  CaffeConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CaffeConfiguration_descriptor_,
      CaffeConfiguration::default_instance_,
      CaffeConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CaffeConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CaffeConfiguration));
  Configuration_descriptor_ = file->message_type(4);
  static const int Configuration_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, fe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, translate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, caffe_),
  };
  Configuration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Configuration_descriptor_,
      Configuration::default_instance_,
      Configuration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Configuration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Configuration));
  BlobFloat_descriptor_ = file->message_type(5);
  static const int BlobFloat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFloat, dim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFloat, data_),
  };
  BlobFloat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobFloat_descriptor_,
      BlobFloat::default_instance_,
      BlobFloat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFloat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobFloat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobFloat));
  ResultList_descriptor_ = file->message_type(6);
  static const int ResultList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList, url_),
  };
  ResultList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultList_descriptor_,
      ResultList::default_instance_,
      ResultList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultList));
  WorkRequest_descriptor_ = file->message_type(7);
  static const int WorkRequest_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, configuration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, pastconfiguration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, errorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, returnqueue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, image_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, result_),
  };
  WorkRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorkRequest_descriptor_,
      WorkRequest::default_instance_,
      WorkRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorkRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorkRequest));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_interface_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FEConfiguration_descriptor_, &FEConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TranslateConfiguration_descriptor_, &TranslateConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchConfiguration_descriptor_, &MatchConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CaffeConfiguration_descriptor_, &CaffeConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Configuration_descriptor_, &Configuration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobFloat_descriptor_, &BlobFloat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultList_descriptor_, &ResultList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorkRequest_descriptor_, &WorkRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_interface_2eproto() {
  delete FEConfiguration::default_instance_;
  delete FEConfiguration_reflection_;
  delete TranslateConfiguration::default_instance_;
  delete TranslateConfiguration_reflection_;
  delete MatchConfiguration::default_instance_;
  delete MatchConfiguration_reflection_;
  delete CaffeConfiguration::default_instance_;
  delete CaffeConfiguration_reflection_;
  delete Configuration::default_instance_;
  delete Configuration_reflection_;
  delete BlobFloat::default_instance_;
  delete BlobFloat_reflection_;
  delete ResultList::default_instance_;
  delete ResultList_reflection_;
  delete WorkRequest::default_instance_;
  delete WorkRequest_reflection_;
}

void protobuf_AddDesc_interface_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017interface.proto\022\016protointerface\"\021\n\017FEC"
    "onfiguration\"2\n\026TranslateConfiguration\022\030"
    "\n\rneighborCount\030\001 \001(\r:\0011\"\?\n\022MatchConfigu"
    "ration\022\025\n\010listSize\030\001 \001(\r:\003100\022\022\n\010databas"
    "e\030\002 \001(\t:\000\"+\n\022CaffeConfiguration\022\025\n\nresul"
    "tSize\030\001 \001(\r:\0015\"\354\001\n\rConfiguration\022\r\n\005queu"
    "e\030\001 \001(\t\022+\n\002fe\030\002 \001(\0132\037.protointerface.FEC"
    "onfiguration\0229\n\ttranslate\030\003 \001(\0132&.protoi"
    "nterface.TranslateConfiguration\0221\n\005match"
    "\030\004 \001(\0132\".protointerface.MatchConfigurati"
    "on\0221\n\005caffe\030\005 \001(\0132\".protointerface.Caffe"
    "Configuration\"*\n\tBlobFloat\022\017\n\003dim\030\001 \003(\rB"
    "\002\020\001\022\014\n\004data\030\002 \002(\014\",\n\nResultList\022\021\n\005score"
    "\030\001 \003(\002B\002\020\001\022\013\n\003url\030\002 \003(\t\"\276\002\n\013WorkRequest\022"
    "\014\n\004uuid\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\001\0224\n\rconf"
    "iguration\030\003 \003(\0132\035.protointerface.Configu"
    "ration\0228\n\021pastConfiguration\030\005 \003(\0132\035.prot"
    "ointerface.Configuration\022\024\n\terrorCode\030\006 "
    "\001(\r:\0010\022\017\n\007message\030\007 \003(\t\022\023\n\013returnQueue\030\010"
    " \001(\t\022\r\n\005image\030\021 \001(\014\022\'\n\004blob\030\022 \001(\0132\031.prot"
    "ointerface.BlobFloat\022*\n\006result\030\023 \001(\0132\032.p"
    "rotointerface.ResultList", 864);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "interface.proto", &protobuf_RegisterTypes);
  FEConfiguration::default_instance_ = new FEConfiguration();
  TranslateConfiguration::default_instance_ = new TranslateConfiguration();
  MatchConfiguration::default_instance_ = new MatchConfiguration();
  CaffeConfiguration::default_instance_ = new CaffeConfiguration();
  Configuration::default_instance_ = new Configuration();
  BlobFloat::default_instance_ = new BlobFloat();
  ResultList::default_instance_ = new ResultList();
  WorkRequest::default_instance_ = new WorkRequest();
  FEConfiguration::default_instance_->InitAsDefaultInstance();
  TranslateConfiguration::default_instance_->InitAsDefaultInstance();
  MatchConfiguration::default_instance_->InitAsDefaultInstance();
  CaffeConfiguration::default_instance_->InitAsDefaultInstance();
  Configuration::default_instance_->InitAsDefaultInstance();
  BlobFloat::default_instance_->InitAsDefaultInstance();
  ResultList::default_instance_->InitAsDefaultInstance();
  WorkRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_interface_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_interface_2eproto {
  StaticDescriptorInitializer_interface_2eproto() {
    protobuf_AddDesc_interface_2eproto();
  }
} static_descriptor_initializer_interface_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FEConfiguration::FEConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FEConfiguration::InitAsDefaultInstance() {
}

FEConfiguration::FEConfiguration(const FEConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FEConfiguration::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FEConfiguration::~FEConfiguration() {
  SharedDtor();
}

void FEConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FEConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FEConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FEConfiguration_descriptor_;
}

const FEConfiguration& FEConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

FEConfiguration* FEConfiguration::default_instance_ = NULL;

FEConfiguration* FEConfiguration::New() const {
  return new FEConfiguration;
}

void FEConfiguration::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FEConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FEConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FEConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FEConfiguration::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FEConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FEConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FEConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FEConfiguration::MergeFrom(const FEConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FEConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FEConfiguration::CopyFrom(const FEConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FEConfiguration::IsInitialized() const {

  return true;
}

void FEConfiguration::Swap(FEConfiguration* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FEConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FEConfiguration_descriptor_;
  metadata.reflection = FEConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TranslateConfiguration::kNeighborCountFieldNumber;
#endif  // !_MSC_VER

TranslateConfiguration::TranslateConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TranslateConfiguration::InitAsDefaultInstance() {
}

TranslateConfiguration::TranslateConfiguration(const TranslateConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TranslateConfiguration::SharedCtor() {
  _cached_size_ = 0;
  neighborcount_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TranslateConfiguration::~TranslateConfiguration() {
  SharedDtor();
}

void TranslateConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TranslateConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TranslateConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TranslateConfiguration_descriptor_;
}

const TranslateConfiguration& TranslateConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

TranslateConfiguration* TranslateConfiguration::default_instance_ = NULL;

TranslateConfiguration* TranslateConfiguration::New() const {
  return new TranslateConfiguration;
}

void TranslateConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    neighborcount_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TranslateConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 neighborCount = 1 [default = 1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &neighborcount_)));
          set_has_neighborcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TranslateConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 neighborCount = 1 [default = 1];
  if (has_neighborcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->neighborcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TranslateConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 neighborCount = 1 [default = 1];
  if (has_neighborcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->neighborcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TranslateConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 neighborCount = 1 [default = 1];
    if (has_neighborcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->neighborcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TranslateConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TranslateConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TranslateConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TranslateConfiguration::MergeFrom(const TranslateConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_neighborcount()) {
      set_neighborcount(from.neighborcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TranslateConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TranslateConfiguration::CopyFrom(const TranslateConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslateConfiguration::IsInitialized() const {

  return true;
}

void TranslateConfiguration::Swap(TranslateConfiguration* other) {
  if (other != this) {
    std::swap(neighborcount_, other->neighborcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TranslateConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TranslateConfiguration_descriptor_;
  metadata.reflection = TranslateConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchConfiguration::kListSizeFieldNumber;
const int MatchConfiguration::kDatabaseFieldNumber;
#endif  // !_MSC_VER

MatchConfiguration::MatchConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchConfiguration::InitAsDefaultInstance() {
}

MatchConfiguration::MatchConfiguration(const MatchConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchConfiguration::SharedCtor() {
  _cached_size_ = 0;
  listsize_ = 100u;
  database_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchConfiguration::~MatchConfiguration() {
  SharedDtor();
}

void MatchConfiguration::SharedDtor() {
  if (database_ != &::google::protobuf::internal::kEmptyString) {
    delete database_;
  }
  if (this != default_instance_) {
  }
}

void MatchConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchConfiguration_descriptor_;
}

const MatchConfiguration& MatchConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

MatchConfiguration* MatchConfiguration::default_instance_ = NULL;

MatchConfiguration* MatchConfiguration::New() const {
  return new MatchConfiguration;
}

void MatchConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    listsize_ = 100u;
    if (has_database()) {
      if (database_ != &::google::protobuf::internal::kEmptyString) {
        database_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 listSize = 1 [default = 100];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listsize_)));
          set_has_listsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_database;
        break;
      }

      // optional string database = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 listSize = 1 [default = 100];
  if (has_listsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listsize(), output);
  }

  // optional string database = 2 [default = ""];
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->database(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 listSize = 1 [default = 100];
  if (has_listsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listsize(), target);
  }

  // optional string database = 2 [default = ""];
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->database(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 listSize = 1 [default = 100];
    if (has_listsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listsize());
    }

    // optional string database = 2 [default = ""];
    if (has_database()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchConfiguration::MergeFrom(const MatchConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listsize()) {
      set_listsize(from.listsize());
    }
    if (from.has_database()) {
      set_database(from.database());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchConfiguration::CopyFrom(const MatchConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchConfiguration::IsInitialized() const {

  return true;
}

void MatchConfiguration::Swap(MatchConfiguration* other) {
  if (other != this) {
    std::swap(listsize_, other->listsize_);
    std::swap(database_, other->database_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchConfiguration_descriptor_;
  metadata.reflection = MatchConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CaffeConfiguration::kResultSizeFieldNumber;
#endif  // !_MSC_VER

CaffeConfiguration::CaffeConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CaffeConfiguration::InitAsDefaultInstance() {
}

CaffeConfiguration::CaffeConfiguration(const CaffeConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CaffeConfiguration::SharedCtor() {
  _cached_size_ = 0;
  resultsize_ = 5u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CaffeConfiguration::~CaffeConfiguration() {
  SharedDtor();
}

void CaffeConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CaffeConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CaffeConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CaffeConfiguration_descriptor_;
}

const CaffeConfiguration& CaffeConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

CaffeConfiguration* CaffeConfiguration::default_instance_ = NULL;

CaffeConfiguration* CaffeConfiguration::New() const {
  return new CaffeConfiguration;
}

void CaffeConfiguration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resultsize_ = 5u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CaffeConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resultSize = 1 [default = 5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultsize_)));
          set_has_resultsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CaffeConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resultSize = 1 [default = 5];
  if (has_resultsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resultsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CaffeConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resultSize = 1 [default = 5];
  if (has_resultsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resultsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CaffeConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resultSize = 1 [default = 5];
    if (has_resultsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CaffeConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CaffeConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CaffeConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CaffeConfiguration::MergeFrom(const CaffeConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resultsize()) {
      set_resultsize(from.resultsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CaffeConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CaffeConfiguration::CopyFrom(const CaffeConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CaffeConfiguration::IsInitialized() const {

  return true;
}

void CaffeConfiguration::Swap(CaffeConfiguration* other) {
  if (other != this) {
    std::swap(resultsize_, other->resultsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CaffeConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CaffeConfiguration_descriptor_;
  metadata.reflection = CaffeConfiguration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Configuration::kQueueFieldNumber;
const int Configuration::kFeFieldNumber;
const int Configuration::kTranslateFieldNumber;
const int Configuration::kMatchFieldNumber;
const int Configuration::kCaffeFieldNumber;
#endif  // !_MSC_VER

Configuration::Configuration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Configuration::InitAsDefaultInstance() {
  fe_ = const_cast< ::protointerface::FEConfiguration*>(&::protointerface::FEConfiguration::default_instance());
  translate_ = const_cast< ::protointerface::TranslateConfiguration*>(&::protointerface::TranslateConfiguration::default_instance());
  match_ = const_cast< ::protointerface::MatchConfiguration*>(&::protointerface::MatchConfiguration::default_instance());
  caffe_ = const_cast< ::protointerface::CaffeConfiguration*>(&::protointerface::CaffeConfiguration::default_instance());
}

Configuration::Configuration(const Configuration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Configuration::SharedCtor() {
  _cached_size_ = 0;
  queue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fe_ = NULL;
  translate_ = NULL;
  match_ = NULL;
  caffe_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Configuration::~Configuration() {
  SharedDtor();
}

void Configuration::SharedDtor() {
  if (queue_ != &::google::protobuf::internal::kEmptyString) {
    delete queue_;
  }
  if (this != default_instance_) {
    delete fe_;
    delete translate_;
    delete match_;
    delete caffe_;
  }
}

void Configuration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Configuration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Configuration_descriptor_;
}

const Configuration& Configuration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

Configuration* Configuration::default_instance_ = NULL;

Configuration* Configuration::New() const {
  return new Configuration;
}

void Configuration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queue()) {
      if (queue_ != &::google::protobuf::internal::kEmptyString) {
        queue_->clear();
      }
    }
    if (has_fe()) {
      if (fe_ != NULL) fe_->::protointerface::FEConfiguration::Clear();
    }
    if (has_translate()) {
      if (translate_ != NULL) translate_->::protointerface::TranslateConfiguration::Clear();
    }
    if (has_match()) {
      if (match_ != NULL) match_->::protointerface::MatchConfiguration::Clear();
    }
    if (has_caffe()) {
      if (caffe_ != NULL) caffe_->::protointerface::CaffeConfiguration::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Configuration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string queue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_queue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->queue().data(), this->queue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fe;
        break;
      }

      // optional .protointerface.FEConfiguration fe = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_translate;
        break;
      }

      // optional .protointerface.TranslateConfiguration translate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_translate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_translate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_match;
        break;
      }

      // optional .protointerface.MatchConfiguration match = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_match:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_caffe;
        break;
      }

      // optional .protointerface.CaffeConfiguration caffe = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_caffe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_caffe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Configuration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string queue = 1;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->queue(), output);
  }

  // optional .protointerface.FEConfiguration fe = 2;
  if (has_fe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fe(), output);
  }

  // optional .protointerface.TranslateConfiguration translate = 3;
  if (has_translate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->translate(), output);
  }

  // optional .protointerface.MatchConfiguration match = 4;
  if (has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->match(), output);
  }

  // optional .protointerface.CaffeConfiguration caffe = 5;
  if (has_caffe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->caffe(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Configuration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string queue = 1;
  if (has_queue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->queue().data(), this->queue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->queue(), target);
  }

  // optional .protointerface.FEConfiguration fe = 2;
  if (has_fe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fe(), target);
  }

  // optional .protointerface.TranslateConfiguration translate = 3;
  if (has_translate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->translate(), target);
  }

  // optional .protointerface.MatchConfiguration match = 4;
  if (has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->match(), target);
  }

  // optional .protointerface.CaffeConfiguration caffe = 5;
  if (has_caffe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->caffe(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Configuration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string queue = 1;
    if (has_queue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->queue());
    }

    // optional .protointerface.FEConfiguration fe = 2;
    if (has_fe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fe());
    }

    // optional .protointerface.TranslateConfiguration translate = 3;
    if (has_translate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->translate());
    }

    // optional .protointerface.MatchConfiguration match = 4;
    if (has_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->match());
    }

    // optional .protointerface.CaffeConfiguration caffe = 5;
    if (has_caffe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->caffe());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configuration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Configuration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Configuration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Configuration::MergeFrom(const Configuration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queue()) {
      set_queue(from.queue());
    }
    if (from.has_fe()) {
      mutable_fe()->::protointerface::FEConfiguration::MergeFrom(from.fe());
    }
    if (from.has_translate()) {
      mutable_translate()->::protointerface::TranslateConfiguration::MergeFrom(from.translate());
    }
    if (from.has_match()) {
      mutable_match()->::protointerface::MatchConfiguration::MergeFrom(from.match());
    }
    if (from.has_caffe()) {
      mutable_caffe()->::protointerface::CaffeConfiguration::MergeFrom(from.caffe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Configuration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Configuration::CopyFrom(const Configuration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {

  return true;
}

void Configuration::Swap(Configuration* other) {
  if (other != this) {
    std::swap(queue_, other->queue_);
    std::swap(fe_, other->fe_);
    std::swap(translate_, other->translate_);
    std::swap(match_, other->match_);
    std::swap(caffe_, other->caffe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Configuration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Configuration_descriptor_;
  metadata.reflection = Configuration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobFloat::kDimFieldNumber;
const int BlobFloat::kDataFieldNumber;
#endif  // !_MSC_VER

BlobFloat::BlobFloat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobFloat::InitAsDefaultInstance() {
}

BlobFloat::BlobFloat(const BlobFloat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobFloat::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobFloat::~BlobFloat() {
  SharedDtor();
}

void BlobFloat::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void BlobFloat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobFloat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobFloat_descriptor_;
}

const BlobFloat& BlobFloat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

BlobFloat* BlobFloat::default_instance_ = NULL;

BlobFloat* BlobFloat::New() const {
  return new BlobFloat;
}

void BlobFloat::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  dim_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobFloat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dim = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dim())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10, input, this->mutable_dim())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobFloat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_dim_cached_byte_size_);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->dim(i), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobFloat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 dim = 1 [packed = true];
  if (this->dim_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _dim_cached_byte_size_, target);
  }
  for (int i = 0; i < this->dim_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->dim(i), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobFloat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated uint32 dim = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->dim_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dim(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _dim_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobFloat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobFloat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobFloat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobFloat::MergeFrom(const BlobFloat& from) {
  GOOGLE_CHECK_NE(&from, this);
  dim_.MergeFrom(from.dim_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobFloat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobFloat::CopyFrom(const BlobFloat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobFloat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void BlobFloat::Swap(BlobFloat* other) {
  if (other != this) {
    dim_.Swap(&other->dim_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobFloat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobFloat_descriptor_;
  metadata.reflection = BlobFloat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultList::kScoreFieldNumber;
const int ResultList::kUrlFieldNumber;
#endif  // !_MSC_VER

ResultList::ResultList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultList::InitAsDefaultInstance() {
}

ResultList::ResultList(const ResultList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultList::~ResultList() {
  SharedDtor();
}

void ResultList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultList_descriptor_;
}

const ResultList& ResultList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

ResultList* ResultList::default_instance_ = NULL;

ResultList* ResultList::New() const {
  return new ResultList;
}

void ResultList::Clear() {
  score_.Clear();
  url_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float score = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 10, input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        break;
      }

      // repeated string url = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url(this->url_size() - 1).data(),
            this->url(this->url_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float score = 1 [packed = true];
  if (this->score_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_score_cached_byte_size_);
  }
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->score(i), output);
  }

  // repeated string url = 2;
  for (int i = 0; i < this->url_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->url(i).data(), this->url(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float score = 1 [packed = true];
  if (this->score_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _score_cached_byte_size_, target);
  }
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->score(i), target);
  }

  // repeated string url = 2;
  for (int i = 0; i < this->url_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url(i).data(), this->url(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->url(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultList::ByteSize() const {
  int total_size = 0;

  // repeated float score = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->score_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _score_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string url = 2;
  total_size += 1 * this->url_size();
  for (int i = 0; i < this->url_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->url(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultList::MergeFrom(const ResultList& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  url_.MergeFrom(from.url_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultList::CopyFrom(const ResultList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultList::IsInitialized() const {

  return true;
}

void ResultList::Swap(ResultList* other) {
  if (other != this) {
    score_.Swap(&other->score_);
    url_.Swap(&other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultList_descriptor_;
  metadata.reflection = ResultList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorkRequest::kUuidFieldNumber;
const int WorkRequest::kTimestampFieldNumber;
const int WorkRequest::kConfigurationFieldNumber;
const int WorkRequest::kPastConfigurationFieldNumber;
const int WorkRequest::kErrorCodeFieldNumber;
const int WorkRequest::kMessageFieldNumber;
const int WorkRequest::kReturnQueueFieldNumber;
const int WorkRequest::kImageFieldNumber;
const int WorkRequest::kBlobFieldNumber;
const int WorkRequest::kResultFieldNumber;
#endif  // !_MSC_VER

WorkRequest::WorkRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorkRequest::InitAsDefaultInstance() {
  blob_ = const_cast< ::protointerface::BlobFloat*>(&::protointerface::BlobFloat::default_instance());
  result_ = const_cast< ::protointerface::ResultList*>(&::protointerface::ResultList::default_instance());
}

WorkRequest::WorkRequest(const WorkRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorkRequest::SharedCtor() {
  _cached_size_ = 0;
  uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = 0;
  errorcode_ = 0u;
  returnqueue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  image_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  blob_ = NULL;
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorkRequest::~WorkRequest() {
  SharedDtor();
}

void WorkRequest::SharedDtor() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (returnqueue_ != &::google::protobuf::internal::kEmptyString) {
    delete returnqueue_;
  }
  if (image_ != &::google::protobuf::internal::kEmptyString) {
    delete image_;
  }
  if (this != default_instance_) {
    delete blob_;
    delete result_;
  }
}

void WorkRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorkRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorkRequest_descriptor_;
}

const WorkRequest& WorkRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_interface_2eproto();
  return *default_instance_;
}

WorkRequest* WorkRequest::default_instance_ = NULL;

WorkRequest* WorkRequest::New() const {
  return new WorkRequest;
}

void WorkRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uuid()) {
      if (uuid_ != &::google::protobuf::internal::kEmptyString) {
        uuid_->clear();
      }
    }
    timestamp_ = 0;
    errorcode_ = 0u;
    if (has_returnqueue()) {
      if (returnqueue_ != &::google::protobuf::internal::kEmptyString) {
        returnqueue_->clear();
      }
    }
    if (has_image()) {
      if (image_ != &::google::protobuf::internal::kEmptyString) {
        image_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_blob()) {
      if (blob_ != NULL) blob_->::protointerface::BlobFloat::Clear();
    }
    if (has_result()) {
      if (result_ != NULL) result_->::protointerface::ResultList::Clear();
    }
  }
  configuration_.Clear();
  pastconfiguration_.Clear();
  message_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorkRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_timestamp;
        break;
      }

      // optional double timestamp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configuration;
        break;
      }

      // repeated .protointerface.Configuration configuration = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_configuration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_configuration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_configuration;
        if (input->ExpectTag(42)) goto parse_pastConfiguration;
        break;
      }

      // repeated .protointerface.Configuration pastConfiguration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pastConfiguration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pastconfiguration()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pastConfiguration;
        if (input->ExpectTag(48)) goto parse_errorCode;
        break;
      }

      // optional uint32 errorCode = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_errorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errorcode_)));
          set_has_errorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_message;
        break;
      }

      // repeated string message = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message(this->message_size() - 1).data(),
            this->message(this->message_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_message;
        if (input->ExpectTag(66)) goto parse_returnQueue;
        break;
      }

      // optional string returnQueue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_returnQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_returnqueue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->returnqueue().data(), this->returnqueue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_image;
        break;
      }

      // optional bytes image = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_blob;
        break;
      }

      // optional .protointerface.BlobFloat blob = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_result;
        break;
      }

      // optional .protointerface.ResultList result = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorkRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uuid(), output);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timestamp(), output);
  }

  // repeated .protointerface.Configuration configuration = 3;
  for (int i = 0; i < this->configuration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->configuration(i), output);
  }

  // repeated .protointerface.Configuration pastConfiguration = 5;
  for (int i = 0; i < this->pastconfiguration_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pastconfiguration(i), output);
  }

  // optional uint32 errorCode = 6 [default = 0];
  if (has_errorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->errorcode(), output);
  }

  // repeated string message = 7;
  for (int i = 0; i < this->message_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->message(i).data(), this->message(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->message(i), output);
  }

  // optional string returnQueue = 8;
  if (has_returnqueue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->returnqueue().data(), this->returnqueue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->returnqueue(), output);
  }

  // optional bytes image = 17;
  if (has_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->image(), output);
  }

  // optional .protointerface.BlobFloat blob = 18;
  if (has_blob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->blob(), output);
  }

  // optional .protointerface.ResultList result = 19;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorkRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uuid = 1;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uuid(), target);
  }

  // optional double timestamp = 2;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->timestamp(), target);
  }

  // repeated .protointerface.Configuration configuration = 3;
  for (int i = 0; i < this->configuration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->configuration(i), target);
  }

  // repeated .protointerface.Configuration pastConfiguration = 5;
  for (int i = 0; i < this->pastconfiguration_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pastconfiguration(i), target);
  }

  // optional uint32 errorCode = 6 [default = 0];
  if (has_errorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->errorcode(), target);
  }

  // repeated string message = 7;
  for (int i = 0; i < this->message_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message(i).data(), this->message(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->message(i), target);
  }

  // optional string returnQueue = 8;
  if (has_returnqueue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->returnqueue().data(), this->returnqueue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->returnqueue(), target);
  }

  // optional bytes image = 17;
  if (has_image()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->image(), target);
  }

  // optional .protointerface.BlobFloat blob = 18;
  if (has_blob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->blob(), target);
  }

  // optional .protointerface.ResultList result = 19;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorkRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uuid = 1;
    if (has_uuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uuid());
    }

    // optional double timestamp = 2;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional uint32 errorCode = 6 [default = 0];
    if (has_errorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errorcode());
    }

    // optional string returnQueue = 8;
    if (has_returnqueue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->returnqueue());
    }

    // optional bytes image = 17;
    if (has_image()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->image());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protointerface.BlobFloat blob = 18;
    if (has_blob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blob());
    }

    // optional .protointerface.ResultList result = 19;
    if (has_result()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  // repeated .protointerface.Configuration configuration = 3;
  total_size += 1 * this->configuration_size();
  for (int i = 0; i < this->configuration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->configuration(i));
  }

  // repeated .protointerface.Configuration pastConfiguration = 5;
  total_size += 1 * this->pastconfiguration_size();
  for (int i = 0; i < this->pastconfiguration_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pastconfiguration(i));
  }

  // repeated string message = 7;
  total_size += 1 * this->message_size();
  for (int i = 0; i < this->message_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorkRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorkRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorkRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorkRequest::MergeFrom(const WorkRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  configuration_.MergeFrom(from.configuration_);
  pastconfiguration_.MergeFrom(from.pastconfiguration_);
  message_.MergeFrom(from.message_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuid()) {
      set_uuid(from.uuid());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_errorcode()) {
      set_errorcode(from.errorcode());
    }
    if (from.has_returnqueue()) {
      set_returnqueue(from.returnqueue());
    }
    if (from.has_image()) {
      set_image(from.image());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blob()) {
      mutable_blob()->::protointerface::BlobFloat::MergeFrom(from.blob());
    }
    if (from.has_result()) {
      mutable_result()->::protointerface::ResultList::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorkRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorkRequest::CopyFrom(const WorkRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkRequest::IsInitialized() const {

  if (has_blob()) {
    if (!this->blob().IsInitialized()) return false;
  }
  return true;
}

void WorkRequest::Swap(WorkRequest* other) {
  if (other != this) {
    std::swap(uuid_, other->uuid_);
    std::swap(timestamp_, other->timestamp_);
    configuration_.Swap(&other->configuration_);
    pastconfiguration_.Swap(&other->pastconfiguration_);
    std::swap(errorcode_, other->errorcode_);
    message_.Swap(&other->message_);
    std::swap(returnqueue_, other->returnqueue_);
    std::swap(image_, other->image_);
    std::swap(blob_, other->blob_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorkRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorkRequest_descriptor_;
  metadata.reflection = WorkRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protointerface

// @@protoc_insertion_point(global_scope)
